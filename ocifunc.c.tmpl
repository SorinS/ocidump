/* -*- c-file-style: "ruby"; indent-tabs-mode: nil -*- */
<%= header_comment %>
#ifndef _WIN32
#define __try
#define __finally
#endif
#include <stdlib.h>
#include <string.h>
#include "ocidump.h"

<%
funcs.each do |f|
  fmt_args = f.fmt_args
  local_vars = f.local_vars
  hide_vars = f.hide_vars
  cleanups = f.cleanups
%>
typedef <%=f.ret.type%> (*<%=f.name%>_func_t)(<%=f.args.collect {|arg| arg.type}.join(', ')%>);
static <%=f.name%>_func_t <%=f.name%>_orig;
static unsigned int <%=f.name%>_flags = OCIDUMP_HOOK_EXIT;

OCIDUMP_EXPORT <%=f.ret.type%> <%=f.name%>(<%=f.args.collect {|arg| arg.type}.join(', ')%>)
{
    size_t call_level;
<%  local_vars.each do |var|
%>    <%=var%>;
<%  end
    if f.before_call
%>    <%=f.before_call.gsub("\n", "\n    ").gsub(/ +$/, '')%>
<%  end
%>    if (!ocidump_is_initialized) {
        ocidump_init();
    }
    call_level = (size_t)pthread_getspecific(ocidump_tls_key);
    pthread_setspecific(ocidump_tls_key, (void*)(call_level + 1));
    <%=f.ret.type != 'void' ? "ret = " : ""%><%=f.name%>_orig(<%=f.args.collect {|arg| arg.name}.join(', ')%>);
    pthread_setspecific(ocidump_tls_key, (void*)call_level);
    if (call_level == 0 && (<%=f.name%>_flags & OCIDUMP_HOOK_EXIT)) {
<%  if f.after_call
%>        <%=f.after_call.gsub("\n", "\n        ").gsub(/ +$/, '')%>
<%  end
    if hide_vars.length != 0
%>        if (ocidump_hide_string) {
<%    hide_vars.each do |hide_var|
%>            <%=hide_var%>;
<%    end
%>        }
<%  end
%>        ocidump_log_start("<%=f.name%>(");
        __try {
<%  f.logging_args.each_with_index do |arg, idx|
      if idx != 0
%>            ocidump_putc(',');
            ocidump_putc(' ');
<%    end
%>            <%=arg%>;
<%  end
    if f.logging_ret
%>            ocidump_puts(") => ");
            <%=f.logging_ret%>;
<%  else
%>            ocidump_putc(')');
<%  end
%>            ocidump_putc('\n');
        } __finally {
            ocidump_log_end();
        }
    }
<%  cleanups.each do |cleanup|
%>    <%=cleanup%>;
<%  end
    if f.ret.type != 'void'
%>    return ret;
<%  end
%>}
<%
end # funcs.each
%>
ocidump_hook_t ocidump_hooks[] = {
<% funcs.each do |f|
%>    {"<%=f.name%>", (void*)<%=f.name%>, (void**)&<%=f.name%>_orig, &<%=f.name%>_flags},
<% end %>};

int ocidump_hook_cnt = <%=funcs.size%>;
