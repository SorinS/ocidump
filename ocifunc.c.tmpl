/* -*- c-file-style: "ruby"; indent-tabs-mode: nil -*- */
<%= header_comment %>
#ifdef _WIN32
#include <windows.h>
#define OCIDUMP_THREAD_ID_FMT "%5u"
#define OCIDUMP_THREAD_ID GetCurrentThreadId()
#else
#include <pthread.h>
#define OCIDUMP_THREAD_ID_FMT "%p"
#define OCIDUMP_THREAD_ID (void*)pthread_self()
#endif
#include <stdlib.h>
#include "ocidump.h"

<%
funcs.each do |f|
  fmt_args = f.args.collect {|arg| arg.fmt_arg}.compact
  fmt_args << f.ret.fmt_arg if f.ret.type != 'void'

  local_vars = []
  cleanups = []
  fmt_args.collect! do |fmt_arg|
    fmt_arg.gsub(/@(\w+)_BUF@/) do |match|
      var_name = "buf" + (local_vars.length + 1).to_s
      local_vars << "char #{var_name}[OCIDUMP_#{$1}_BUF_SIZE]"
      var_name
    end.gsub(/@BUF_PTR@/) do |match|
      var_name = "buf" + (local_vars.length + 1).to_s
      local_vars << "char *#{var_name} = NULL"
      cleanups << "free(#{var_name})"
      '&' + var_name
    end
  end
  local_vars.unshift(f.ret.type + " ret") if f.ret.type != 'void'

  hide_vars = []
  f.args.each do |arg|
    if arg.fmt == '\"%.*s\"'
       len, str = arg.fmt_arg.gsub(/\(.*?\)/, '').split(/\s*,\s*/)
       hide_vars << len + ' = 6'
       hide_vars << str + ' = (OraText*)"hidden"'
    end
  end
%>
typedef <%=f.ret.type%> (*<%=f.name%>_func_t)(<%=f.args.collect {|arg| arg.type}.join(', ')%>);
static <%=f.name%>_func_t <%=f.name%>_orig;
static unsigned int <%=f.name%>_flags = OCIDUMP_HOOK_EXIT;

<%=f.ret.type%> <%=f.name%>(<%=f.args.collect {|arg| arg.type}.join(', ')%>)
{
<%  local_vars.each do |var|
%>    <%=var%>;
<%  end
    if f.before_call
%>    <%=f.before_call.gsub("\n", "\n    ").gsub(/ +$/, '')%>
<%  end
%>    if (!ocidump_is_initialized) {
        ocidump_init();
    }
    <%=f.ret.type != 'void' ? "ret = " : ""%><%=f.name%>_orig(<%=f.args.collect {|arg| arg.name}.join(', ')%>);
    if (<%=f.name%>_flags & OCIDUMP_HOOK_EXIT) {
<%  if f.after_call
%>        <%=f.after_call.gsub("\n", "\n        ").gsub(/ +$/, '')%>
<%  end
    if hide_vars.length != 0
%>        if (ocidump_hide_string) {
<%    hide_vars.each do |hide_var|
%>            <%=hide_var%>;
<%    end
%>        }
<%  end
%>        ocidump_log(OCIDUMP_THREAD_ID_FMT ": <%=f.name%>(<%=f.args.collect {|arg| arg.fmt.gsub(/[A-Z0-9_]+_FMT/) {|fmt| '%" ' + fmt + ' "'}}.join(', ')%>)<%=
f.ret.type != 'void' ? " => " + f.ret.fmt : ""%>\n",
                     OCIDUMP_THREAD_ID,
                     <%=fmt_args.join(",\n                     ")%>);
    }
<%  cleanups.each do |cleanup|
%>    <%=cleanup%>;
<%  end
    if f.ret.type != 'void'
%>    return ret;
<%  end
%>}
<%
end # funcs.each
%>
ocidump_hook_t ocidump_hooks[] = {
<% funcs.each do |f|
%>    {"<%=f.name%>", (void*)<%=f.name%>, (void**)&<%=f.name%>_orig, &<%=f.name%>_flags},
<% end %>    {NULL, NULL, NULL, NULL},
};
