OCIAnyDataAccess:
  :ret:  [sword,                         ":status"]
  :args:
       - ["OCISvcCtx *svchp",            ":OCISvcCtx"]
       - ["OCIError *errhp",             ":OCIError"]
       - ["OCIAnyData *sdata",           ":pointer"]
       - ["OCITypeCode tc",              ":OCITypeCode"]
       - ["OCIType *type",               ":pointer"]
       - ["void *ind",                   ":pointer_to_null_indicator", ":out", tc, 0]
       - ["void *attr_val",              ":pointer_to_pointer", ":out"]
       - ["ub4 *length",                 ":pointer_to_ub4", ":out"]

OCIAnyDataAttrGet:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyData *sdata,           ":pointer"]
       - [OCITypeCode tc,              ":OCITypeCode"]
       - [OCIType *type,               ":pointer"]
       - [void *ind,                   ":pointer_to_null_indicator", ":out", tc, 0]
       - [void *attr_val,              ":pointer_or_pointer_to_pointer", ":out", is_any]
       - [ub4 *length,                 ":pointer_to_ub4", ":out"]
       - [boolean is_any,              ":boolean"]

OCIAnyDataAttrSet:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyData *sdata,           ":pointer"]
       - [OCITypeCode tc,              ":OCITypeCode"]
       - [OCIType *type,               ":pointer"]
       - [void *ind,                   ":pointer_to_null_indicator", ":out", tc, 0]
       - [void *attr_val,              ":pointer"]
       - [ub4 length,                  ":ub4"]
       - [boolean is_any,              ":boolean"]

OCIAnyDataBeginCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCITypeCode tc,              ":OCITypeCode"]
       - [OCIType *type,               ":pointer"]
       - [OCIDuration dur,             ":OCIDuration"]
       - [OCIAnyData **sdata,          ":pointer_to_pointer", ":out"]

OCIAnyDataCollAddElem:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyData *sdata,           ":pointer"]
       - [OCITypeCode tc,              ":OCITypeCode"]
       - [OCIType *type,               ":pointer"]
       - [void *ind,                   ":pointer_to_null_indicator", ":in", tc, 1]
       - [void *attr_val,              ":pointer"]
       - [ub4 length,                  ":ub4"]
       - [boolean is_any,              ":boolean"]
       - [boolean last_elem,           ":boolean"]

OCIAnyDataCollGetElem:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyData *sdata,           ":pointer"]
       - [OCITypeCode tc,              ":OCITypeCode"]
       - [OCIType *type,               ":pointer"]
       - [void *ind,                   ":pointer_to_null_indicator", ":out", tc, 0] 
       - [void *celem_val,             ":pointer_or_pointer_to_pointer", ":out", is_any]
       - [ub4 *length,                 ":pointer_to_ub4", ":out"]
       - [boolean is_any,              ":boolean"]

OCIAnyDataConvert:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCITypeCode tc,              ":OCITypeCode"]
       - [OCIType *type,               ":pointer"]
       - [OCIDuration dur,             ":OCIDuration"]
       - [void *ind,                   ":pointer_to_null_indicator", ":in", tc, 1]
       - [void *data_val,              ":pointer"]
       - [ub4 len,                     ":ub4"]
       - [OCIAnyData **sdata,          ":pointer_to_pointer", ":inout"]

OCIAnyDataDestroy:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyData *sdata,           ":pointer"]

OCIAnyDataEndCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyData *sdata,           ":pointer"]

OCIAnyDataGetCurrAttrNum:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyData *sdata,           ":pointer"]
       - [ub4 *attrnum,                ":pointer_to_ub4", ":out"]

OCIAnyDataGetType:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyData *sdata,           ":pointer"]
       - [OCITypeCode *tc,             ":pointer_to_OCITypeCode", ":out"]
       - [OCIType **type,              ":pointer_to_pointer", ":out"]

OCIAnyDataIsNull:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyData *sdata,           ":pointer"]
       - [boolean *isnull,             ":pointer_to_boolean", ":out"]

OCIAnyDataSetAddInstance:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyDataSet *data_set,     ":pointer"]
       - [OCIAnyData **data,           ":pointer_to_pointer", ":inout"]

OCIAnyDataSetBeginCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCITypeCode typecode,        ":OCITypeCode"]
       - [const OCIType *type,         ":pointer"]
       - [OCIDuration dur,             ":OCIDuration"]
       - [OCIAnyDataSet ** data_set,   ":pointer_to_pointer", ":out"]

OCIAnyDataSetDestroy:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyDataSet *data_set,     ":pointer"]

OCIAnyDataSetEndCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyDataSet *data_set,     ":pointer"]

OCIAnyDataSetGetCount:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyDataSet *data_set,     ":pointer"]
       - [ub4 *count,                  ":pointer_to_ub4", ":out"]

OCIAnyDataSetGetInstance:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyDataSet *data_set,     ":pointer"]
       - [OCIAnyData **data,           ":pointer_to_pointer", ":inout"]

OCIAnyDataSetGetType:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAnyDataSet *data_set,     ":pointer"]
       - [OCITypeCode *tc,             ":pointer_to_OCITypeCode", ":out"]
       - [OCIType **type,              ":pointer_to_pointer", ":out"]

OCIAppCtxClearAll:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *sesshndl,              ":OCISession"]
       - [void *nsptr,                 ":string_with_length", ":in", nsptrlen]
       - [ub4 nsptrlen,                ":ub4"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 mode,                    ":ub4_hex"]

OCIAppCtxSet:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *sesshndl,              ":OCISession"]
       - [void *nsptr,                 ":string_with_length", ":in", nsptrlen]
       - [ub4 nsptrlen,                ":ub4"]
       - [void *attrptr,               ":string_with_length", ":in", attrptrlen]
       - [ub4 attrptrlen,              ":ub4"]
       - [void *valueptr,              ":string_with_length", ":in", valueptrlen]
       - [ub4 valueptrlen,             ":ub4"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 mode,                    ":ub4_hex"]

OCIArrayDescriptorAlloc:
  :ret:  [sword,                       ":status"]
  :args:
       - [const void *parenth,         ":OCIEnv"]
       - [void **descpp,               ":array_of_pointer", ":out", array_size, ret]
       - [const ub4 type,              ":htype"]
       - [ub4 array_size,              ":ub4"]
       - [const size_t xtramem_sz,     ":size_t"]
       - [void **usrmempp,             ":pointer_to_pointer", ":out"]

OCIArrayDescriptorFree:
  :ret:  [sword,                       ":status"]
  :args:
       - [void **descp,                ":pointer"]
       - [const ub4 type,              ":htype"]

OCIAttrGet:
  :ret:  [sword,                       ":status"]
  :args:
       - [const dvoid *trgthndlp,      ":ocihandle", ":in", trghndltyp]
       - [ub4 trghndltyp,              ":htype"]
       - [dvoid *attributep,           ":read_attrval", ":out", trghndltyp, attrtype, sizep, ret]
       - [ub4 *sizep,                  ":pointer_to_ub4", ":out"]
       - [ub4 attrtype,                ":attrtype", trghndltyp]
       - [OCIError *errhp,             ":OCIError"]

OCIAttrSet:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *trgthndlp,            ":ocihandle", ":in", trghndltyp]
       - [ub4 trghndltyp,              ":htype"]
       - [dvoid *attributep,           ":write_attrval", ":in", trghndltyp, attrtype, size]
       - [ub4 size,                    ":ub4"]
       - [ub4 attrtype,                ":attrtype", trghndltyp]
       - [OCIError *errhp,             ":OCIError"]

OCIBindArrayOfStruct:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIBind *bindp,              ":pointer"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 pvskip,                  ":ub4"]
       - [ub4 indskip,                 ":ub4"]
       - [ub4 alskip,                  ":ub4"]
       - [ub4 rcskip,                  ":ub4"]

OCIBindByName:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIBind **bindp,             ":pointer_to_pointer", ":out"]
       - [OCIError *errhp,             ":OCIError"]
       - [const text *placeholder,     ":string_with_signed_length", ":in", placeh_len]
       - [sb4 placeh_len,              ":sb4"]
       - [dvoid *valuep,               ":pointer"]
       - [sb4 value_sz,                ":sb4"]
       - [ub2 dty,                     ":SQLT"]
       - [dvoid *indp,                 ":pointer"]
       - [ub2 *alenp,                  ":pointer"]
       - [ub2 *rcodep,                 ":pointer"]
       - [ub4 maxarr_len,              ":ub4"]
       - [ub4 *curelep,                ":pointer"]
       - [ub4 mode,                    ":ub4_hex"]

OCIBindByName2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIBind **bindp,             ":pointer_to_pointer", ":out"]
       - [OCIError *errhp,             ":OCIError"]
       - [const OraText *placeholder,  ":string_with_signed_length", ":in", placeh_len]
       - [sb4 placeh_len,              ":sb4"]
       - [void  *valuep,               ":pointer"]
       - [sb8 value_sz,                ":sb8"]
       - [ub2 dty,                     ":SQLT"]
       - [void  *indp,                 ":pointer"]
       - [ub4 *alenp,                 ":pointer"]
       - [ub2 *rcodep,                 ":pointer"]
       - [ub4 maxarr_len,              ":ub4"]
       - [ub4 *curelep,                ":pointer"]
       - [ub4 mode,                    ":ub4_hex"]

OCIBindByPos:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIBind **bindp,             ":pointer_to_pointer", ":out"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 position,                ":ub4"]
       - [dvoid *valuep,               ":pointer"]
       - [sb4 value_sz,                ":ub4"]
       - [ub2 dty,                     ":SQLT"]
       - [dvoid *indp,                 ":pointer"]
       - [ub2 *alenp,                  ":pointer"]
       - [ub2 *rcodep,                 ":pointer"]
       - [ub4 maxarr_len,              ":ub4"]
       - [ub4 *curelep,                ":pointer"]
       - [ub4 mode,                    ":ub4_hex"]

OCIBindByPos2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIBind **bindp,             ":pointer_to_pointer", ":out"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 position,                ":ub4"]
       - [void *valuep,                ":pointer"]
       - [sb8 value_sz,                ":ub4"]
       - [ub2 dty,                     ":SQLT"]
       - [void  *indp,                 ":pointer"]
       - [ub4 *alenp,                  ":pointer"]
       - [ub2 *rcodep,                 ":pointer"]
       - [ub4 maxarr_len,              ":ub4"]
       - [ub4 *curelep,                ":pointer"]
       - [ub4 mode,                    ":ub4_hex"]

OCIBindDynamic:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIBind *bindp,              ":pointer"]
       - [OCIError *errhp,             ":OCIError"]
       - [void *ictxp,                 ":pointer"]
       - [OCICallbackInBind icbfp,     ":function_pointer"]
       - [void *octxp,                 ":pointer"]
       - [OCICallbackOutBind ocbfp,    ":function_pointer"]

OCIBindObject:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIBind *bindp,              ":pointer"]
       - [OCIError *errhp,             ":OCIError"]
       - [const OCIType *type,         ":pointer"]
       - [dvoid **pgvpp,               ":pointer"]
       - [ub4 *pvszsp,                 ":pointer"]
       - [dvoid **indpp,               ":pointer"]
       - [ub4 *indszp,                 ":pointer"]

OCIBreak:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *hndlp,                ":ocihandle", ":in", OCI_HTYPE_SVCCTX, OCI_HTYPE_SERVER]
       - [OCIError *errhp,             ":OCIError"]

OCICacheFlush:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [void *context,               ":pointer"]
       - ["OCIRef *(*get)(void *context, ub1 *last)", ":function_pointer"]
       - [OCIRef **ref,                ":pointer_to_pointer", ":inout"]

OCICacheFlushRefresh:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [void *context,               ":pointer"]
       - ["OCIRef *(*get)(void *context, ub1 *last)", ":function_pointer"]
       - [OCIRef **ref,                ":pointer_to_pointer", ":inout"]

OCICacheFree:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]

OCICacheGetObjects:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [OCIObjectProperty property,  ":OCIObjectProperty"]
       - [void *client_context,        ":pointer"]
       - ["void (*client_callback)(void *client_context, void *object)", ":function_pointer"]

OCICacheRefresh:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [OCIRefreshOpt option,        ":OCIRefreshOpt"]
       - [void *context,               ":pointer"]
       - ["OCIRef *(*get)(void *context)", ":function_pointer"]
       - [OCIRef **ref,                ":pointer_to_pointer", ":inout"]

OCICacheRegister:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIObjectEvent event,        ":OCIObjectEvent"]
       - [void *client_context,        ":pointer"]
       - ["void (*client_callback)(void *client_context, OCIObjectEvent event, void *object)", ":function_pointer"]

OCICacheUnmark:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]

OCICacheUnpin:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]

OCICharSetConversionIsReplacementUsed:
  :ret:  [boolean,                     ":boolean"]
  :args:
       - [void *envhp,                 ":ocihandle", ":in", OCI_HTYPE_ENV, OCI_HTYPE_SESSION]

OCIClientVersion:
  :ret:  [void]
  :args:
       - [sword *major_version,        ":pointer_to_sword", ":out"]
       - [sword *minor_version,        ":pointer_to_sword", ":out"]
       - [sword *update_num,           ":pointer_to_sword", ":out"]
       - [sword *patch_num,            ":pointer_to_sword", ":out"]
       - [sword *port_update_num,      ":pointer_to_sword", ":out"]

OCICollAppend:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const dvoid *elem,           ":pointer"]
       - [const dvoid *elemind,        ":pointer"]
       - [OCIColl *coll,               ":pointer"]

OCICollAssign:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIColl *rhs,          ":pointer"]
       - [OCIColl *lhs,                ":pointer"]

OCICollAssignElem:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [sb4 index,                   ":sb4"]
       - [const dvoid *elem,           ":pointer"]
       - [const dvoid *elemind,        ":pointer"]
       - [OCIColl *coll,               ":pointer"]

OCICollGetElem:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIColl *coll,         ":pointer"]
       - [sb4 index,                   ":sb4"]
       - [boolean *exists,             ":pointer_to_boolean", ":out"]
       - [dvoid **elem,                ":pointer_to_pointer", ":out"]
       - [dvoid **elemind,             ":pointer_to_pointer", ":out"]

OCICollGetElemArray:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIColl *coll,         ":pointer"]
       - [sb4 index,                   ":sb4"]
       - [boolean *exists,             ":pointer_to_boolean", ":out"]
       - [void  **elem,                ":array_of_pointer", ":out", "*nelems", ret]
       - [void  **elemind,             ":array_of_pointer", ":out", "*nelems", ret]
       - [uword *nelems,               ":pointer_to_uword", ":inout"]

OCICollIsLocator:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIColl *coll,         ":pointer"]
       - [boolean *result,             ":pointer_to_boolean", ":out"]

OCICollMax:
  :ret:  [sb4,                         ":sb4"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [const OCIColl *coll,         ":pointer"]

OCICollSize:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIColl *coll,         ":pointer"]
       - [sb4 *size,                   ":pointer_to_sb4", ":out"]

OCICollTrim:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [sb4 trim_num,                ":sb4"]
       - [OCIColl *coll,               ":pointer"]

OCIConnectionPoolCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCICPool *poolhp,            ":pointer"]
       - [OraText **poolName,          ":pointer_to_string_with_length", ":out", (ub4*)poolNameLen, ret]
       - [sb4 *poolNameLen,            ":pointer_to_sb4", ":out"]
       - [const OraText *dblink,       ":string_with_signed_length", ":in", dblinkLen]
       - [sb4 dblinkLen,               ":sb4"]
       - [ub4 connMin,                 ":ub4"]
       - [ub4 connMax,                 ":ub4"]
       - [ub4 connIncr,                ":ub4"]
       - [const OraText *poolUserName, ":string_with_signed_length", ":in", poolUserLen]
       - [sb4 poolUserLen,             ":sb4"]
       - [const OraText *poolPassword, ":string_with_signed_length", ":in", poolPassLen]
       - [sb4 poolPassLen,             ":sb4"]
       - [ub4 mode,                    ":ub4_hex"]

OCIConnectionPoolDestroy:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCICPool *poolhp,            ":pointer"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 mode,                    ":ub4_hex"]

OCIDBShutdown:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAdmin *admhp,             ":pointer"]
       - [ub4 mode,                    ":ub4_hex"]

OCIDBStartup:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIAdmin *admhp,             ":pointer"]
       - [ub4 mode,                    ":ub4_hex"]
       - [ub4 flags,                   ":ub4_hex"]

OCIDateAddDays:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCIDate *date,         ":OCIDate", ":in"]
       - [sb4 num_days,                ":sb4"]
       - [OCIDate *result,             ":OCIDate", ":out"]

OCIDateAddMonths:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCIDate *date,         ":OCIDate", ":in"]
       - [sb4 num_months,              ":sb4"]
       - [OCIDate *result,             ":OCIDate", ":out"]

OCIDateAssign:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCIDate *from,         ":OCIDate", ":in"]
       - [OCIDate *to,                 ":OCIDate", ":out"]

OCIDateCheck:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCIDate *date,         ":OCIDate", ":in"]
       - [uword *valid,                ":pointer_to_uword", ":out"]

OCIDateCompare:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCIDate *date1,        ":OCIDate", ":in"]
       - [const OCIDate *date2,        ":OCIDate", ":in"]
       - [sword *result,               ":pointer_to_sword", ":out"]

OCIDateDaysBetween:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCIDate *date1,        ":OCIDate", ":in"]
       - [const OCIDate *date2,        ":OCIDate", ":in"]
       - [sb4 *num_days,               ":pointer_to_sb4", ":out"]

OCIDateFromText:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const oratext *date_str,     ":string_with_length", ":in", d_str_length]
       - [ub4 d_str_length,            ":ub4"]
       - [const oratext *fmt,          ":string_with_length", ":in", fmt_length]
       - [ub1 fmt_length,              ":ub1"]
       - [const oratext *lang_name,    ":string_with_length", ":in", lang_length]
       - [ub4 lang_length,             ":ub4"]
       - [OCIDate *date,               ":OCIDate", ":out"]

OCIDateLastDay:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCIDate *date,         ":OCIDate", ":in"]
       - [OCIDate *last_day,           ":OCIDate", ":out"]

OCIDateNextDay:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCIDate *date,         ":OCIDate", ":in"]
       - [const oratext *day_p,        ":string_with_length", ":in", day_length]
       - [ub4 day_length,              ":ub4"]
       - [OCIDate *next_day,           ":OCIDate", ":out"]

OCIDateSysDate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [OCIDate *sys_date,           ":OCIDate", ":out"]

OCIDateTimeAssign:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIDateTime *from,     ":OCIDateTime"]
       - [OCIDateTime *to,             ":OCIDateTime"]

OCIDateTimeCheck:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIDateTime *date,     ":OCIDateTime"]
       - [ub4 *valid,                  ":pointer_to_ub4", ":out"]

OCIDateTimeCompare:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIDateTime *date1,    ":OCIDateTime"]
       - [const OCIDateTime *date2,    ":OCIDateTime"]
       - [sword *result,               ":pointer_to_sword", ":out"]

OCIDateTimeConstruct:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIDateTime *datetime,       ":OCIDateTime"]
       - [sb2 yr,                      ":sb2"]
       - [ub1 mnth,                    ":ub1"]
       - [ub1 dy,                      ":ub1"]
       - [ub1 hr,                      ":ub1"]
       - [ub1 mm,                      ":ub1"]
       - [ub1 ss,                      ":ub1"]
       - [ub4 fsec,                    ":ub4"]
       - [OraText *timezone,           ":string_with_length", ":in", timezone_length]
       - [size_t timezone_length,      ":size_t"]

OCIDateTimeConvert:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIDateTime *indate,         ":OCIDateTime"]
       - [OCIDateTime *outdate,        ":OCIDateTime"]

OCIDateTimeFromArray:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [ub1 *inarray,                ":array_of_ub1", ":in", len, 0]
       - [ub4 len,                     ":ub4"]
       - [ub1 type,                    ":SQLT"]
       - [OCIDateTime *datetime,       ":OCIDateTime"]
       - [const OCIInterval *reftz,    ":OCIInterval"]
       - [ub1 fsprec,                  ":ub1"]

OCIDateTimeFromText:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OraText *date_str,     ":string_with_length", ":in", dstr_length]
       - [size_t dstr_length,          ":size_t"]
       - [const OraText *fmt,          ":string_with_length", ":in", fmt_length]
       - [ub1 fmt_length,              ":ub1"]
       - [const OraText *lang_name,    ":string_with_length", ":in", lang_length]
       - [size_t lang_length,          ":size_t"]
       - [OCIDateTime *date,           ":OCIDateTime"]

OCIDateTimeGetDate:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIDateTime *date,     ":OCIDateTime"]
       - [sb2 *yr,                     ":pointer_to_sb2", ":out"]
       - [ub1 *mnth,                   ":pointer_to_ub1", ":out"]
       - [ub1 *dy,                     ":pointer_to_ub1", ":out"]

OCIDateTimeGetTime:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIDateTime *datetime,       ":OCIDateTime"]
       - [ub1 *hr,                     ":pointer_to_ub1"]
       - [ub1 *mm,                     ":pointer_to_ub1"]
       - [ub1 *ss,                     ":pointer_to_ub1"]
       - [ub4 *fsec,                   ":pointer_to_ub4"]

OCIDateTimeGetTimeZoneName:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIDateTime *datetime, ":OCIDateTime"]
       - [ub1 *buf,                    ":string_with_length", ":out", "ret ? 0 : *buflen"]
       - [ub4 *buflen,                 ":pointer_to_ub4", ":inout"]

OCIDateTimeGetTimeZoneOffset:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIDateTime *datetime, ":OCIDateTime"]
       - [sb1 *hr,                     ":pointer_to_sb1", ":out"]
       - [sb1 *mm,                     ":pointer_to_sb1", ":out"]

OCIDateTimeIntervalAdd:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIDateTime *datetime,       ":OCIDateTime"]
       - [OCIInterval *inter,          ":OCIInterval"]
       - [OCIDateTime *outdatetime,    ":OCIDateTime"]

OCIDateTimeIntervalSub:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIDateTime *datetime,       ":OCIDateTime"]
       - [OCIInterval *inter,          ":OCIInterval"]
       - [OCIDateTime *outdatetime,    ":OCIDateTime"]

OCIDateTimeSubtract:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIDateTime *indate1,        ":OCIDateTime"]
       - [OCIDateTime *indate2,        ":OCIDateTime"]
       - [OCIInterval *inter,          ":OCIInterval"]

OCIDateTimeSysTimeStamp:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIDateTime *sys_date,       ":OCIDateTime"]

OCIDateTimeToArray:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIDateTime *datetime, ":OCIDateTime"]
       - [const OCIInterval *reftz,    ":OCIInterval"]
       - [ub1 *outarray,               ":array_of_ub1", ":out", "len ? *len : 0", ret]
       - [ub4 *len,                    ":pointer_to_ub4", ":out"]
       - [ub1 fsprec,                  ":ub1"]

OCIDateTimeToText:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIDateTime *date,     ":OCIDateTime"]
       - [const OraText *fmt,          ":string_with_length", ":in", fmt_length]
       - [ub1 fmt_length,              ":ub1"]
       - [ub1 fsprec,                  ":ub1"]
       - [const OraText *lang_name,    ":string_with_length", ":in", lang_length]
       - [size_t lang_length,          ":size_t"]
       - [ub4 *buf_size,               ":pointer_to_ub4", ":inout"]
       - [OraText *buf,                ":string_with_length", ":out", "ret ? 0 : *buf_size"]

OCIDateToText:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCIDate *date,         ":OCIDate", ":in"]
       - [const oratext *fmt,          ":string_with_length", ":in", fmt_length]
       - [ub1 fmt_length,              ":ub1"]
       - [const oratext *lang_name,    ":string_with_length", ":in", lang_length]
       - [ub4 lang_length,             ":ub4"]
       - [ub4 *buf_size,               ":pointer_to_ub4", ":inout"]
       - [oratext *buf,                ":string_with_length", ":out", "ret ? 0 : *buf_size"]

OCIDateZoneToZone:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCIDate *date1,        ":OCIDate", ":in"]
       - [const oratext *zon1,         ":string_with_length", ":in", zon1_length]
       - [ub4 zon1_length,             ":ub4"]
       - [const oratext *zon2,         ":string_with_length", ":in", zon2_length]
       - [ub4 zon2_length,             ":ub4"]
       - [OCIDate *date2,              ":OCIDate", ":out"]

OCIDefineArrayOfStruct:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIDefine *defnp,            ":pointer"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 pvskip,                  ":ub4"]
       - [ub4 indskip,                 ":ub4"]
       - [ub4 rlskip,                  ":ub4"]
       - [ub4 rcskip,                  ":ub4"]

OCIDefineByPos:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIDefine **defnp,           ":pointer_to_pointer", ":out"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 position,                ":ub4"]
       - [dvoid *valuep,               ":pointer"]
       - [sb4 value_sz,                ":sb4"]
       - [ub2 dty,                     ":SQLT"]
       - [dvoid *indp,                 ":pointer"]
       - [ub2 *rlenp,                  ":pointer"]
       - [ub2 *rcodep,                 ":pointer"]
       - [ub4 mode,                    ":ub4_hex"]

OCIDefineByPos2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIDefine **defnp,           ":pointer_to_pointer", ":out"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 position,                ":ub4"]
       - [void *valuep,                ":pointer"]
       - [sb8 value_sz,                ":sb8"]
       - [ub2 dty,                     ":SQLT"]
       - [void *indp,                  ":pointer"]
       - [ub4 *rlenp,                  ":pointer"]
       - [ub2 *rcodep,                 ":pointer"]
       - [ub4 mode,                    ":ub4_hex"]

OCIDefineDynamic:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIDefine *defnp,            ":pointer"]
       - [OCIError *errhp,             ":OCIError"]
       - [void  *octxp,                ":pointer"]
       - [OCICallbackDefine ocbfp,     ":function_pointer"]

OCIDefineObject:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIDefine *defnp,            ":pointer"]
       - [OCIError *errhp,             ":OCIError"]
       - [const OCIType *type,         ":pointer"]
       - [dvoid **pgvpp,               ":pointer"]
       - [ub4 *pvszsp,                 ":pointer"]
       - [dvoid **indpp,               ":pointer"]
       - [ub4 *indszp,                 ":pointer"]

OCIDescribeAny:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [dvoid *objptr,               ":pointer_to_desc_obj", ":in", objnm_len, objptr_typ]
       - [ub4 objnm_len,               ":ub4"]
       - [ub1 objptr_typ,              ":OCI_OTYPE"]
       - [ub1 info_level,              ":ub1"]
       - [ub1 objtyp,                  ":ub1"]
       - [OCIDescribe *dschp,          ":pointer"]

OCIDescriptorAlloc:
  :ret:  [sword,                       ":status"]
  :args:
       - [const dvoid *parenth,        ":pointer"]
       - [dvoid **descpp,              ":pointer_to_ocihandle", ":out", type, parenth, ret]
       - [const ub4 type,              ":htype"]
       - [const size_t xtramem_sz,     ":size_t"]
       - [dvoid **usrmempp,            ":pointer_to_pointer", ":out"]

OCIDescriptorFree:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *descp,                ":ocihandle_free", ":in", type]
       - [const ub4 type,              ":htype"]

OCIDurationBegin:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [OCIDuration parent,          ":OCIDuration"]
       - [OCIDuration *dur,            ":pointer_to_OCIDuration", ":out"]

OCIDurationEnd:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [OCIDuration duration,        ":OCIDuration"]

OCIDurationGetParent:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIDuration duration,        ":OCIDuration"]
       - [OCIDuration *parent,         ":pointer_to_OCIDuration", ":out"]

OCIEnvCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv **envp,               ":pointer_to_ocihandle", ":out", OCI_HTYPE_ENV, "NULL", ret]
       - [ub4 mode,                    ":ub4_hex"]
       - [dvoid *ctxp,                 ":pointer"]
       - ["dvoid *(*malocfp)(dvoid *ctxp, size_t size)", ":function_pointer"]
       - ["dvoid *(*ralocfp)(dvoid *ctxp, dvoid *memptr, size_t newsize)", ":function_pointer"]
       - ["void   (*mfreefp)(dvoid *ctxp, dvoid *memptr)", ":function_pointer"]
       - [size_t xtramem_sz,           ":size_t"]
       - [dvoid **usrmempp,            ":pointer_to_pointer", ":out"]

OCIEnvInit:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv **envp,               ":pointer_to_ocihandle", ":out", OCI_HTYPE_ENV, "NULL", ret]
       - [ub4 mode,                    ":ub4_hex"]
       - [size_t xtramem_sz,           ":size_t"]
       - [dvoid **usrmempp,            ":pointer_to_pointer", ":out"]

OCIEnvNlsCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv **envhpp,             ":pointer_to_ocihandle", ":out", OCI_HTYPE_ENV, "NULL", ret]
       - [ub4 mode,                    ":ub4_hex"]
       - [void *ctxp,                  ":pointer"]
       - ["void *(*malocfp)(void *ctxp, size_t size)", ":function_pointer"]
       - ["void *(*ralocfp)(void *ctxp, void *memptr, size_t newsize)", ":function_pointer"]
       - ["void (*mfreefp)(void *ctxp, void *memptr)", ":function_pointer"]
       - [size_t xtramemsz,            ":size_t"]
       - [void **usrmempp,             ":pointer_to_pointer", ":out"]
       - [ub2 charset,                 ":ub2"]
       - [ub2 ncharset,                ":ub2"]

OCIErrorGet:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *hndlp,                ":ocihandle", ":in", OCI_HTYPE_ERROR, OCI_HTYPE_ENV]
       - [ub4 recordno,                ":ub4"]
       - [text *sqlstate,              ":string", ":out"]
       - [sb4 *errcodep,               ":pointer_to_sb4", ":out"]
       - [text *bufp,                  ":string_with_maxlen", ":out", "ret ? 0 : bufsiz"]
       - [ub4 bufsiz,                  ":ub4"]
       - [ub4 type,                    ":htype"]

OCIFEnvCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv **envp,               ":pointer_to_ocihandle", ":out", OCI_HTYPE_ENV, "NULL", ret]
       - [ub4 mode,                    ":ub4_hex"]
       - [void *ctxp,                  ":pointer"]
       - ["void *(*malocfp)(void  *ctxp, size_t size)", ":function_pointer"]
       - ["void *(*ralocfp)(void  *ctxp, void  *memptr, size_t newsize)", ":function_pointer"]
       - ["void  (*mfreefp)(void  *ctxp, void  *memptr)", ":function_pointer"]
       - [size_t xtramem_sz,           ":size_t"]
       - [void  **usrmempp,            ":pointer_to_pointer", ":out"]
       - [void  *fupg,                 ":pointer"]

OCIHandleAlloc:
  :ret:  [sword,                       ":status"]
  :args:
       - [const dvoid *parenth,        ":OCIEnv"]
       - [dvoid **hndlpp,              ":pointer_to_ocihandle", ":out", type, parenth, ret]
       - [const ub4 type,              ":htype"]
       - [const size_t xtramem_sz,     ":size_t"]
       - [dvoid **usrmempp,            ":pointer_to_pointer", ":out"]

OCIHandleFree:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *hndlp,                ":ocihandle_free", ":in", type]
       - [const ub4 type,              ":htype"]

OCIInitialize:
  :ret:  [sword,                       ":status"]
  :args:
       - [ub4 mode,                    ":ub4_hex"]
       - [dvoid *ctxp,                 ":pointer"]
       - ["dvoid *(*malocfp)(dvoid *ctxp, size_t size)", ":function_pointer"]
       - ["dvoid *(*ralocfp)(dvoid *ctxp, dvoid *memptr, size_t newsize)", ":function_pointer"]
       - ["void   (*mfreefp)(dvoid *ctxp, dvoid *memptr)", ":function_pointer"]

OCIIntervalAdd:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIInterval *addend1,        ":OCIInterval"]
       - [OCIInterval *addend2,        ":OCIInterval"]
       - [OCIInterval *result,         ":OCIInterval"]

OCIIntervalAssign:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIInterval *ininter,  ":OCIInterval"]
       - [OCIInterval *outinter,       ":OCIInterval"]

OCIIntervalCheck:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIInterval *interval, ":OCIInterval"]
       - [ub4 *valid,                  ":pointer_to_ub4", ":out"]

OCIIntervalCompare:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIInterval *inter1,         ":OCIInterval"]
       - [OCIInterval *inter2,         ":OCIInterval"]
       - [sword *result,               ":pointer_to_sword", ":out"]

OCIIntervalDivide:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIInterval *dividend,       ":OCIInterval"]
       - [OCINumber *divisor,          ":OCINumber", ":in"]
       - [OCIInterval *result,         ":OCIInterval"]

OCIIntervalFromNumber:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIInterval *inter,          ":OCIInterval"]
       - [OCINumber *number,           ":OCINumber", ":in"]

OCIIntervalFromTZ:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const oratext *inpstring,    ":string_with_length", ":in", str_len]
       - [size_t str_len,              ":size_t"]
       - [OCIInterval *result,         ":OCIInterval"]

OCIIntervalFromText:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OraText *inpstr,       ":string_with_length", ":in", str_len]
       - [size_t str_len,              ":size_t"]
       - [OCIInterval *result,         ":OCIInterval"]

OCIIntervalGetDaySecond:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [sb4 *dy,                     ":pointer_to_sb4", ":out"]
       - [sb4 *hr,                     ":pointer_to_sb4", ":out"]
       - [sb4 *mm,                     ":pointer_to_sb4", ":out"]
       - [sb4 *ss,                     ":pointer_to_sb4", ":out"]
       - [sb4 *fsec,                   ":pointer_to_sb4", ":out"]
       - [const OCIInterval *result,   ":OCIInterval"]

OCIIntervalGetYearMonth:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [sb4 *yr,                     ":pointer_to_sb4", ":out"]
       - [sb4 *mnth,                   ":pointer_to_sb4", ":out"]
       - [const OCIInterval *result,   ":OCIInterval"]

OCIIntervalMultiply:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIInterval *inter,    ":OCIInterval"]
       - [OCINumber *nfactor,          ":OCINumber"]
       - [OCIInterval *result,         ":OCIInterval"]

OCIIntervalSetDaySecond:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [sb4 dy,                      ":sb4"]
       - [sb4 hr,                      ":sb4"]
       - [sb4 mm,                      ":sb4"]
       - [sb4 ss,                      ":sb4"]
       - [sb4 fsec,                    ":sb4"]
       - [OCIInterval *result,         ":OCIInterval"]

OCIIntervalSetYearMonth:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [sb4 yr,                      ":sb4"]
       - [sb4 mnth,                    ":sb4"]
       - [OCIInterval *result,         ":OCIInterval"]

OCIIntervalSubtract:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [OCIInterval *minuend,        ":OCIInterval"]
       - [OCIInterval *subtrahend,     ":OCIInterval"]
       - [OCIInterval *result,         ":OCIInterval"]

OCIIntervalToNumber:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIInterval *inter,    ":OCIInterval"]
       - [OCINumber *number,           ":OCINumber"]

OCIIntervalToText:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *hndl,                  ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *err,               ":OCIError"]
       - [const OCIInterval *inter,    ":OCIInterval"]
       - [ub1 lfprec,                  ":ub1"]
       - [ub1 fsprec,                  ":ub1"]
       - [OraText *buffer,             ":string_with_length", ":out", "ret ? 0 : *resultlen"]
       - [size_t buflen,               ":size_t"]
       - [size_t *resultlen,           ":pointer_to_size_t", ":out"]

OCIIterCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIColl *coll,         ":pointer"]
       - [OCIIter **itr,               ":pointer_to_pointer", ":out"]

OCIIterDelete:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIIter **itr,               ":pointer_to_pointer", ":inout"]

OCIIterGetCurrent:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIIter *itr,          ":pointer"]
       - [void **elem,                 ":pointer_to_pointer", ":out"]
       - [void **elemind,              ":pointer_to_pointer", ":out"]

OCIIterInit:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIColl *coll,         ":pointer"]
       - [OCIIter *itr,                ":pointer"]

OCIIterNext:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIIter *itr,                ":pointer"]
       - [void **elem,                 ":pointer_to_pointer", ":out"]
       - [void **elemind,              ":pointer_to_pointer", ":out"]
       - [boolean *eoc,                ":pointer_to_boolean", ":out"]

OCIIterPrev:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIIter *itr,                ":pointer"]
       - [void **elem,                 ":pointer_to_pointer", ":out"]
       - [void **elemind,              ":pointer_to_pointer", ":out"]
       - [boolean *boc,                ":pointer_to_boolean", ":out"]

OCILobAppend:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *dst_locp,     ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [OCILobLocator *src_locp,     ":ocihandle", ":in", OCI_DTYPE_LOB]

OCILobArrayRead:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 *array_iter,             ":pointer_to_ub4", ":inout"]
       - [OCILobLocator **lobp_arr,    ":pointer"]
       - [oraub8 *byte_amt_arr,        ":pointer"]
       - [oraub8 *char_amt_arr,        ":pointer"]
       - [oraub8 *offset_arr,          ":pointer"]
       - [void  **bufp_arr,            ":pointer"]
       - [oraub8 *bufl_arr,            ":pointer"]
       - [ub1 piece,                   ":OCI_PIECE"]
       - [void *ctxp,                  ":pointer"]
       - [OCICallbackLobArrayRead cbfp, ":function_pointer"]
       - [ub2 csid,                    ":ub2"]
       - [ub1 csfrm,                   ":SQLCS"]

OCILobArrayWrite:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 *array_iter,             ":pointer_to_ub4", ":inout"]
       - [OCILobLocator **lobp_arr,    ":pointer"]
       - [oraub8 *byte_amt_arr,        ":pointer"]
       - [oraub8 *char_amt_arr,        ":pointer"]
       - [oraub8 *offset_arr,          ":pointer"]
       - [void **bufp_arr,             ":pointer"]
       - [oraub8 *bufl_arr,            ":pointer"]
       - [ub1 piece,                   ":OCI_PIECE"]
       - [void *ctxp,                  ":pointer"]
       - [OCICallbackLobArrayWrite cbfp, ":function_pointer"]
       - [ub2 csid,                    ":ub2"]
       - [ub1 csfrm,                   ":SQLCS"]

OCILobAssign:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [const OCILobLocator *src_locp, ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [OCILobLocator **dst_locpp,   ":pointer_to_ocihandle", ":inout", OCI_DTYPE_LOB, envhp, ret]

OCILobCharSetForm:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [const OCILobLocator *locp,   ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub1 *csfrm,                  ":pointer_to_SQLCS", ":out"]

OCILobCharSetId:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [const OCILobLocator *locp,   ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub2 *csid,                   ":pointer_to_ub2", ":out"]

OCILobClose:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]

OCILobCopy:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *dst_locp,     ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [OCILobLocator *src_locp,     ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 amount,                  ":ub4"]
       - [ub4 dst_offset,              ":ub4"]
       - [ub4 src_offset,              ":ub4"]

OCILobCopy2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *dst_locp,     ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [OCILobLocator *src_locp,     ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [oraub8 amount,               ":ub8"]
       - [oraub8 dst_offset,           ":ub8"]
       - [oraub8 src_offset,           ":ub8"]

OCILobCreateTemporary:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub2 csid,                    ":ub2"]
       - [ub1 csfrm,                   ":SQLCS"]
       - [ub1 lobtype,                 ":LobType"]
       - [boolean cache,               ":boolean"]
       - [OCIDuration duration,        ":OCIDuration"]

OCILobDisableBuffering:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]

OCILobEnableBuffering:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]

OCILobErase:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 *amount,                 ":pointer_to_ub4", ":inout"]
       - [ub4 offset,                  ":ub4"]

OCILobErase2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [oraub8 *amount,              ":pointer_to_ub8", ":inout"]
       - [oraub8 offset,               ":ub8"]

OCILobFileClose:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *filep,        ":ocihandle", ":in", OCI_DTYPE_LOB]

OCILobFileCloseAll:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]

OCILobFileExists:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *filep,        ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [boolean *flag,               ":pointer_to_boolean", ":out"]

OCILobFileGetName:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [const OCILobLocator *filep,  ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [text *dir_alias,             ":string_with_length", ":out", "ret ? 0 : *d_length"]
       - [ub2 *d_length,               ":pointer_to_ub2"]
       - [text *filename,              ":string_with_length", ":out", "ret ? 0 : *f_length"]
       - [ub2 *f_length,               ":pointer_to_ub2"]

OCILobFileIsOpen:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *filep,        ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [boolean *flag,               ":pointer_to_boolean", ":out"]

OCILobFileOpen:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *filep,        ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub1 mode,                    ":ub1"]

OCILobFileSetName:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator **filepp,      ":pointer_to_ocihandle", ":inout", OCI_DTYPE_LOB, envhp, ret]
       - [const text *dir_alias,       ":string_with_length", ":in", d_length]
       - [ub2 d_length,                ":ub2"]
       - [const text *filename,        ":string_with_length", ":in", f_length]
       - [ub2 f_length,                ":ub2"]

OCILobFlushBuffer:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 flag,                    ":LobBufferingFlushFlag"]

OCILobFreeTemporary:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]

OCILobGetChunkSize:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 *chunksizep,             ":pointer_to_ub4", ":out"]

OCILobGetContentType:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *lobp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [oratext *contenttypep,       ":string_with_length", ":out", "ret ? 0 : *contenttypelenp"]
       - [ub4 *contenttypelenp,        ":pointer_to_ub4", ":inout"]
       - [ub4 mode,                    ":ub4"]

OCILobGetDeduplicateRegions:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [OCILobRegion *regp,          ":pointer"]
       - [ub4 *count,                  ":pointer_to_ub4", ":inout"]
       - [ub1 piece,                   ":ub1"]
       - [void *ctxp,                  ":pointer"]
       - [OCICallbackLobGetDeduplicateRegions cbfp, ":function_pointer"]

OCILobGetLength:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 *lenp,                   ":pointer_to_ub4", ":out"]

OCILobGetLength2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [oraub8 *lenp,                ":pointer_to_ub8", ":out"]

OCILobGetOptions:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *lobp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 optypes,                 ":ub4"]
       - [void *optionsp,              ":pointer_to_ub4", ":out"]
       - [ub4 *optionslenp,            ":pointer_to_ub4", ":out"]
       - [ub4 mode,                    ":ub4"]

OCILobGetStorageLimit:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *lobp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [oraub8 *limitp,              ":pointer_to_ub8", ":out"]

OCILobIsEqual:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [const OCILobLocator *x,      ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [const OCILobLocator *y,      ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [boolean *is_equal,           ":pointer_to_boolean", ":out"]

OCILobIsOpen:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [boolean *flag,               ":pointer_to_boolean", ":out"]

OCILobIsTemporary:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [boolean *is_temporary,       ":pointer_to_boolean", ":out"]

OCILobLoadFromFile:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *dst_locp,     ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [OCILobLocator *src_filep,    ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 amount,                  ":ub4"]
       - [ub4 dst_offset,              ":ub4"]
       - [ub4 src_offset,              ":ub4"]

OCILobLoadFromFile2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *dst_locp,     ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [OCILobLocator *src_filep,    ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [oraub8 amount,               ":ub8"]
       - [oraub8 dst_offset,           ":ub8"]
       - [oraub8 src_offset,           ":ub8"]

OCILobLocatorAssign:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [const OCILobLocator *src_locp, ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [OCILobLocator **dst_locpp,   ":pointer_to_ocihandle", ":inout", OCI_DTYPE_LOB, svchp, ret]

OCILobLocatorIsInit:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [const OCILobLocator *locp,   ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [boolean *is_initialized,     ":pointer_to_boolean", ":out"]

OCILobOpen:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub1 mode,                    ":LobOpenMode"]

OCILobRead:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 *amtp,                   ":pointer_to_ub4", ":inout"]
       - [ub4 offset,                  ":ub4"]
       - [dvoid *bufp,                 ":pointer"]
       - [ub4 bufl,                    ":ub4"]
       - [dvoid *ctxp,                 ":pointer"]
       - [OCICallbackLobRead cbfp,     ":function_pointer"]
       - [ub2 csid,                    ":ub2"]
       - [ub1 csfrm,                   ":SQLCS"]

OCILobRead2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [oraub8 *byte_amtp,           ":pointer_to_ub8", ":inout"]
       - [oraub8 *char_amtp,           ":pointer_to_ub8", ":inout"]
       - [oraub8 offset,               ":ub8"]
       - [dvoid *bufp,                 ":pointer"]
       - [oraub8 bufl,                 ":ub8"]
       - [ub1 piece,                   ":OCI_PIECE"]
       - [dvoid *ctxp,                 ":pointer"]
       - [OCICallbackLobRead2 cbfp,    ":function_pointer"]
       - [ub2 csid,                    ":ub2"]
       - [ub1 csfrm,                   ":SQLCS"]

OCILobSetContentType:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *lobp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [const oratext *contenttypep, ":string_with_length", ":in", contenttypelen]
       - [ub4 contenttypelen,          ":ub4"]
       - [ub4 mode,                    ":ub4"]

OCILobSetOptions:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *lobp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 optypes,                 ":ub4"]
       - [void *optionsp,              ":pointer_to_ub4"]
       - [ub4 optionslen,              ":ub4"]
       - [ub4 mode,                    ":ub4"]

OCILobTrim:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 newlen,                  ":ub4"]

OCILobTrim2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [oraub8 newlen,               ":ub8"]

OCILobWrite:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 *amtp,                   ":pointer_to_ub4", ":inout"]
       - [ub4 offset,                  ":ub4"]
       - [dvoid *bufp,                 ":pointer"]
       - [ub4 buflen,                  ":ub4"]
       - [ub1 piece,                   ":OCI_PIECE"]
       - [dvoid *ctxp,                 ":pointer"]
       - [OCICallbackLobWrite cbfp,    ":function_pointer"]
       - [ub2 csid,                    ":ub2"]
       - [ub1 csfrm,                   ":SQLCS"]

OCILobWrite2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *locp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [oraub8 *byte_amtp,           ":pointer_to_ub8", ":inout"]
       - [oraub8 *char_amtp,           ":pointer_to_ub8", ":inout"]
       - [oraub8 offset,               ":ub8"]
       - [dvoid *bufp,                 ":pointer"]
       - [oraub8 buflen,               ":ub8"]
       - [ub1 piece,                   ":OCI_PIECE"]
       - [dvoid *ctxp,                 ":pointer"]
       - [OCICallbackLobWrite2 cbfp,   ":function_pointer"]
       - [ub2 csid,                    ":ub2"]
       - [ub1 csfrm,                   ":SQLCS"]

OCILobWriteAppend:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *lobp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [ub4 *amtp,                   ":pointer_to_ub4", ":inout"]
       - [void *bufp,                  ":pointer"]
       - [ub4 bufl,                    ":ub4"]
       - [ub1 piece,                   ":OCI_PIECE"]
       - [void *ctxp,                  ":pointer"]
       - [OCICallbackLobWrite cbfp,    ":function_pointer"]
       - [ub2 csid,                    ":ub2"]
       - [ub1 csfrm,                   ":SQLCS"]

OCILobWriteAppend2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCILobLocator *lobp,         ":ocihandle", ":in", OCI_DTYPE_LOB]
       - [oraub8 *byte_amtp,           ":pointer_to_ub8", ":inout"]
       - [oraub8 *char_amtp,           ":pointer_to_ub8", ":inout"]
       - [void  *bufp,                 ":pointer"]
       - [oraub8 bufl,                 ":ub8"]
       - [ub1 piece,                   ":OCI_PIECE"]
       - [void  *ctxp,                 ":pointer"]
       - [OCICallbackLobWrite2 cbfp,   ":function_pointer"]
       - [ub2 csid,                    ":ub2"]
       - [ub1 csfrm,                   ":SQLCS"]

OCILogoff:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]

OCILogon:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCISvcCtx **svchp,           ":pointer_to_ocihandle", ":out", OCI_HTYPE_SVCCTX, envhp, ret]
       - [const text *username,        ":string_with_length", ":in", uname_len]
       - [ub4 uname_len,               ":ub4"]
       - [const text *password,        ":string_with_length", ":in", passwd_len]
       - [ub4 passwd_len,              ":ub4"]
       - [const text *dbname,          ":string_with_length", ":in", dbname_len]
       - [ub4 dbname_len,              ":ub4"]

OCILogon2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCISvcCtx **svchp,           ":pointer_to_ocihandle", ":out", OCI_HTYPE_SVCCTX, envhp, ret]
       - [const text *username,        ":string_with_length", ":in", uname_len]
       - [ub4 uname_len,               ":ub4"]
       - [const text *password,        ":string_with_length", ":in", passwd_len]
       - [ub4 passwd_len,              ":ub4"]
       - [const text *dbname,          ":string_with_length", ":in", dbname_len]
       - [ub4 dbname_len,              ":ub4"]
       - [ub4 mode,                    ":OCILogon2Mode"]

OCIMessageClose:
  :ret:  [sword,                       ":status"]
  :args:
       - [void  *envhp,                ":pointer"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIMsg *msghp,               ":pointer"]

OCIMessageGet:
  :ret:  [OraText *,                   ":string"]
  :args:
       - [OCIMsg *msgh,                ":pointer"]
       - [ub4 msgno,                   ":ub4"]
       - [OraText *msgbuf,             ":pointer"]
       - [size_t buflen,               ":size_t"]

OCIMessageOpen:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *envhp,                ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIMsg **msghp,              ":pointer_to_pointer", ":out"]
       - [const OraText *product,      ":string"]
       - [const OraText *facility,     ":string"]
       - [OCIDuration dur,             ":OCIDuration"]

OCINlsCharSetIdToName:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *envhp,                ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [oratext *buf,                ":string_with_maxlen", ":out", "ret ? 0 : buflen"]
       - [size_t buflen,               ":size_t"]
       - [ub2 id,                      ":ub2"]

OCINlsCharSetNameToId:
  :ret:  [ub2,                         ":ub2"]
  :args:
       - [dvoid *envhp,                ":ocihandle", ":in", OCI_HTYPE_SESSION, OCI_HTYPE_ENV]
       - [const oratext *name,         ":string", ":in"]

OCINumberAbs:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberAdd:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number1,    ":OCINumber", ":in"]
       - [const OCINumber *number2,    ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberArcCos:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberArcSin:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberArcTan:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberArcTan2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number1,    ":OCINumber", ":in"]
       - [const OCINumber *number2,    ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberAssign:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *from,       ":OCINumber", ":in"]
       - [OCINumber *to,               ":OCINumber", ":out"]

OCINumberCeil:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberCmp:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number1,    ":OCINumber", ":in"]
       - [const OCINumber *number2,    ":OCINumber", ":in"]
       - [sword *result,               ":pointer_to_sword", ":out"]

OCINumberCos:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberDec:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [OCINumber *number,           ":OCINumber", ":out"]

OCINumberDiv:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number1,    ":OCINumber", ":in"]
       - [const OCINumber *number2,    ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberExp:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberFloor:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberFromInt:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const dvoid *inum,           ":pointer_to_int_with_length", ":in", inum_length, inum_s_flag]
       - [uword inum_length,           ":uword"]
       - [uword inum_s_flag,           ":uword"]
       - [OCINumber *number,           ":OCINumber", ":out"]

OCINumberFromReal:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const dvoid *rnum,           ":pointer_to_real_with_length", ":in", rnum_length, 1, 0]
       - [uword rnum_length,           ":uword"]
       - [OCINumber *number,           ":OCINumber", ":out"]

OCINumberFromText:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const text *str,             ":string_with_length", ":in", str_length]
       - [ub4 str_length,              ":ub4"]
       - [const text *fmt,             ":string_with_length", ":in", fmt_length]
       - [ub4 fmt_length,              ":ub4"]
       - [const text *nls_params,      ":string_with_length", ":in", nls_p_length]
       - [ub4 nls_p_length,            ":ub4"]
       - [OCINumber *number,           ":OCINumber", ":out"]

OCINumberHypCos:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberHypSin:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberHypTan:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberInc:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [OCINumber *number,           ":OCINumber", ":out"]

OCINumberIntPower:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *base,       ":OCINumber", ":in"]
       - [const sword exp,             ":sword"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberIsInt:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [boolean *result,             ":pointer_to_boolean", ":out"]

OCINumberIsZero:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [boolean *result,             ":pointer_to_boolean", ":out"]

OCINumberLn:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberLog:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *base,       ":OCINumber", ":in"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberMod:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number1,    ":OCINumber", ":in"]
       - [const OCINumber *number2,    ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberMul:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number1,    ":OCINumber", ":in"]
       - [const OCINumber *number2,    ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberNeg:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberPower:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *base,       ":OCINumber", ":in"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberPrec:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [eword nDigs,                 ":sword"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberRound:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [sword decplace,              ":sword"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberSetPi:
  :ret:  [void]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [OCINumber *num,              ":OCINumber", ":out"]

OCINumberSetZero:
  :ret:  [void]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [OCINumber *num,              ":OCINumber", ":out"]

OCINumberShift:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [const sword nDig,            ":sword"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberSign:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [sword *result,               ":pointer_to_boolean", ":out"]

OCINumberSin:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberSqrt:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberSub:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number1,    ":OCINumber", ":in"]
       - [const OCINumber *number2,    ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberTan:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCINumberToInt:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [uword rsl_length,            ":uword"]
       - [uword rsl_flag,              ":uword"]
       - [dvoid *rsl,                  ":pointer_to_int_with_length", ":out", rsl_length, rsl_flag]

OCINumberToReal:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [uword rsl_length,            ":uword"]
       - [dvoid *rsl,                  ":pointer_to_real_with_length", ":out", rsl_length, 1, ret]

OCINumberToRealArray:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber **number,    ":array_of_OCINumber", ":in", elems, 0]
       - [uword elems,                 ":uword"]
       - [uword rsl_length,            ":uword"]
       - [dvoid *rsl,                  ":pointer_to_real_with_length", ":out", rsl_length, elems, ret]

OCINumberToText:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [const text *fmt,             ":string_with_length", ":in", fmt_length]
       - [ub4 fmt_length,              ":ub4"]
       - [const text *nls_params,      ":string_with_length", ":in", nls_p_length]
       - [ub4 nls_p_length,            ":ub4"]
       - [ub4 *buf_size,               ":pointer_to_ub4", ":in"]
       - [text *buf,                   ":string_with_length", ":out", "ret ? 0 : *buf_size"]

OCINumberTrunc:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIError *err,               ":OCIError"]
       - [const OCINumber *number,     ":OCINumber", ":in"]
       - [sword decplace,              ":sword"]
       - [OCINumber *result,           ":OCINumber", ":out"]

OCIObjectAlwaysLatest:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]

OCIObjectArrayPin:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIRef **ref_array,          ":array_of_pointer", ":in", array_size, 0]
       - [ub4 array_size,              ":ub4"]
       - [OCIComplexObject **cor_array, ":array_of_pointer", ":in", array_size, 0]
       - [ub4 cor_array_size,          ":ub4"]
       - [OCIPinOpt pin_option,        ":OCIPinOpt"]
       - [OCIDuration pin_duration,    ":OCIDuration"]
       - [OCILockOpt lock,             ":OCILockOpt"]
       - [void **obj_array,            ":array_of_pointer", ":out", array_size, 0]
       - [ub4 *pos,                    ":pointer_to_ub4", ":out"]

OCIObjectCopy:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [void *source,                ":pointer"]
       - [void *null_source,           ":pointer"]
       - [void *target,                ":pointer"]
       - [void *null_target,           ":pointer"]
       - [OCIType *tdo,                ":pointer"]
       - [OCIDuration duration,        ":OCIDuration"]
       - [ub1 option,                  ":ub1"]

OCIObjectExists:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *ins,                   ":pointer"]
       - [boolean *exist,              ":pointer_to_boolean", ":out"]

OCIObjectFlush:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]

OCIObjectFlushRefresh:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]

OCIObjectFree:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [dvoid *instance,             ":pointer"]
       - [ub2 flags,                   ":ub2"]

OCIObjectGetAttr:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *instance,              ":pointer"]
       - [void *null_struct,           ":pointer"]
       - [struct OCIType *tdo,         ":pointer"]
       - [const oratext **names,       ":array_of_const_string_with_length", ":in", lengths, name_count, 0]
       - [const ub4 *lengths,          ":array_of_ub4", ":in", name_count, 0]
       - [const ub4 name_count,        ":ub4"]
       - [const ub4 *indexes,          ":array_of_ub4", ":in", index_count, 0]
       - [const ub4 index_count,       ":ub4"]
       - [OCIInd *attr_null_status,    ":pointer_to_OCIInd", ":out"]
       - [void **attr_null_struct,     ":pointer_to_pointer", ":out"]
       - [void **attr_value,           ":pointer_to_pointer", ":out"]
       - [struct OCIType **attr_tdo,   ":pointer_to_pointer", ":out"]

OCIObjectGetInd:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [dvoid *instance,             ":pointer"]
       - [dvoid **null_struct,         ":pointer_to_pointer", ":out"]

OCIObjectGetNewOID:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCISvcCtx *svc,              ":OCISvcCtx"]
       - [ub1 *oid,                    ":pointer_to_ub1", ":out"]

OCIObjectGetObjectRef:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]
       - [OCIRef *object_ref,          ":pointer"]

OCIObjectGetPrimaryKeyTypeRef:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [void *table,                 ":pointer"]
       - [OCIRef *type_ref,            ":pointer"]

OCIObjectGetProperty:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const void *obj,             ":pointer"]
       - [OCIObjectPropId propertyId,  ":OCIObjectPropId"]
       - [void *property,              ":pointer"]
       - [ub4 *size,                   ":pointer_to_ub4", ":inout"]

OCIObjectGetTypeRef:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *instance,              ":pointer"]
       - [OCIRef *type_ref,            ":pointer"]

OCIObjectIsDirtied:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *ins,                   ":pointer"]
       - [boolean *dirty,              ":pointer_to_boolean", ":out"]

OCIObjectIsDirty:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *ins,                   ":pointer"]
       - [boolean *dirty,              ":pointer_to_boolean", ":out"]

OCIObjectIsLoaded:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *ins,                   ":pointer"]
       - [boolean *load,               ":pointer_to_boolean", ":out"]

OCIObjectIsLocked:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *ins,                   ":pointer"]
       - [boolean *lock,               ":pointer_to_boolean", ":out"]

OCIObjectLock:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]

OCIObjectLockNoWait:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]

OCIObjectMakeObjectRef:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [void *table,                 ":pointer"]
       - [void **values,               ":array_of_pointer", ":in", array_len, 0]
       - [ub4 array_len,               ":ub4"]
       - [OCIRef *object_ref,          ":pointer"]

OCIObjectMarkDelete:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *instance,              ":pointer"]

OCIObjectMarkDeleteByRef:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIRef *object_ref,          ":pointer"]

OCIObjectMarkUpdate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]

OCIObjectNew:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [OCITypeCode typecode,        ":OCITypeCode"]
       - [OCIType *tdo,                ":pointer"]
       - [dvoid *table,                ":pointer"]
       - [OCIDuration duration,        ":OCIDuration"]
       - [boolean value,               ":boolean"]
       - [dvoid **instance,            ":pointer_to_pointer", ":out"]

OCIObjectNotAlwaysLatest:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]

OCIObjectPin:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIRef *object_ref,          ":pointer"]
       - [OCIComplexObject *corhdl,    ":pointer"]
       - [OCIPinOpt pin_option,        ":OCIPinOpt"]
       - [OCIDuration pin_duration,    ":OCIDuration"]
       - [OCILockOpt lock_option,      ":OCILockOpt"]
       - [dvoid **object,              ":pointer_to_pointer", ":out"]

OCIObjectPinCountReset:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]

OCIObjectPinTable:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [const oratext *schema_name,  ":string_with_length", ":in", s_n_length]
       - [ub4 s_n_length,              ":ub4"]
       - [const oratext *object_name,  ":string_with_length", ":in", o_n_length]
       - [ub4 o_n_length,              ":ub4"]
       - [const OCIRef *scope_obj_ref, ":pointer"]
       - [OCIDuration pin_duration,    ":OCIDuration"]
       - [void **object,               ":pointer_to_pointer", ":out"]

OCIObjectRefresh:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]

OCIObjectSetAttr:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *instance,              ":pointer"]
       - [void *null_struct,           ":pointer"]
       - [struct OCIType *tdo,         ":pointer"]
       - [const oratext **names,       ":array_of_const_string_with_length", ":in", lengths, name_count, 0]
       - [const ub4 *lengths,          ":array_of_ub4", ":in", name_count, 0]
       - [const ub4 name_count,        ":ub4"]
       - [const ub4 *indexes,          ":array_of_ub4", ":in", index_count, 0]
       - [const ub4 index_count,       ":ub4"]
       - [const OCIInd null_status,    ":OCIInd"]
       - [const void *attr_null_struct, ":pointer"]
       - [const void *attr_value,      ":pointer"]

OCIObjectSetData:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *obj_hdr,               ":pointer"]
       - [void *data,                  ":pointer"]

OCIObjectUnmark:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [void *object,                ":pointer"]

OCIObjectUnmarkByRef:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIRef *ref,                 ":pointer"]

OCIObjectUnpin:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [dvoid *object,               ":pointer"]

OCIParamGet:
  :ret:  [sword,                       ":status"]
  :args:
       - [const dvoid *hndlp,          ":ocihandle", ":in", htype]
       - [ub4 htype,                   ":htype"]
       - [OCIError *errhp,             ":OCIError"]
       - [dvoid **parmdpp,             ":pointer_to_ocihandle", ":out", OCI_DTYPE_PARAM, hndlp, ret]
       - [ub4 pos,                     ":ub4"]

OCIPasswordChange:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [const OraText *user_name,    ":string_with_length", ":in", usernm_len]
       - [ub4 usernm_len,              ":ub4"]
       - [const OraText *opasswd,      ":string_with_length", ":in", opasswd_len]
       - [ub4 opasswd_len,             ":ub4"]
       - [const OraText *npasswd,      ":string_with_length", ":in", npasswd_len]
       - [ub4 npasswd_len,             ":ub4"]
       - [ub4 mode,                    ":ub4"]

OCIPing:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 mode,                    ":ub4"]

OCIRawAllocSize:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIRaw *raw,           ":pointer"]
       - [ub4 *allocsize,              ":pointer_to_ub4", ":out"]

OCIRawAssignBytes:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const ub1 *rhs,              ":pointer"]
       - [ub4 rhs_len,                 ":ub4"]
       - [OCIRaw **lhs,                ":pointer_to_pointer", ":inout"]

OCIRawAssignRaw:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIRaw *rhs,           ":pointer"]
       - [OCIRaw **lhs,                ":pointer_to_pointer", ":inout"]

OCIRawPtr:
  :ret:  [ub1 *,                       ":pointer"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [const OCIRaw *raw,           ":pointer"]

OCIRawResize:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [ub4 new_size,                ":ub4"]
       - [OCIRaw **raw,                ":pointer_to_pointer", ":inout"]

OCIRawSize:
  :ret:  [ub4,                         ":ub4"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [const OCIRaw *raw,           ":pointer"]

OCIRefAssign:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIRef *source,        ":pointer"]
       - [OCIRef **target,             ":pointer_to_pointer", ":inout"]

OCIRefClear:
  :ret:  [void]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIRef *ref,                 ":pointer"]

OCIRefFromHex:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [const oratext *hex,          ":string_with_length", ":in", length]
       - [ub4 length,                  ":ub4"]
       - [OCIRef **ref,                ":pointer_to_pointer", ":inout"]

OCIRefHexSize:
  :ret:  [ub4,                         ":ub4"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [const OCIRef *ref,           ":pointer"]

OCIRefIsEqual:
  :ret:  [boolean,                     ":boolean"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [const OCIRef *x,             ":pointer"]
       - [const OCIRef *y,             ":pointer"]

OCIRefIsNull:
  :ret:  [boolean,                     ":boolean"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [const OCIRef *ref,           ":pointer"]

OCIRefToHex:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIRef *ref,           ":pointer"]
       - [oratext *hex,                ":string_with_length", ":out", "ret ? 0 : *hex_length"]
       - [ub4 *hex_length,             ":pointer_to_ub4", ":inout"]

OCIReset:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *hndlp,                ":ocihandle", ":in", OCI_HTYPE_SVCCTX, OCI_HTYPE_SERVER]
       - [OCIError *errhp,             ":OCIError"]

OCIResultSetToStmt:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIResult *rsetdp,           ":pointer"]
       - [OCIError *errhp,             ":OCIError"]

OCIRowidToChar:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIRowid *rowidDesc,         ":pointer"]
       - [OraText *outbfp,             ":string_with_length", ":out", "ret ? 0 : *outbflp"]
       - [ub2 *outbflp,                ":pointer_to_ub2", ":inout"]
       - [OCIError *errhp,             ":OCIError"]

OCIServerAttach:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIServer *srvhp,            ":OCIServer"]
       - [OCIError *errhp,             ":OCIError"]
       - [CONST text *dblink,          ":string_with_length", ":in", dblink_len]
       - [sb4 dblink_len,              ":sb4"]
       - [ub4 mode,                    ":ub4"]

OCIServerDetach:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIServer *srvhp,            ":OCIServer"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 mode,                    ":ub4"]

OCIServerRelease:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *hndlp,                ":ocihandle", ":in", hndltype]
       - [OCIError *errhp,             ":OCIError"]
       - [OraText *bufp,               ":string_with_maxlen", ":out", bufsz]
       - [ub4 bufsz,                   ":ub4"]
       - [ub1 hndltype,                ":htype"]
       - [ub4 *version,                ":pointer_to_version_number", ":out"]

OCIServerVersion:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *hndlp,                ":ocihandle", ":in", hndltype]
       - [OCIError *errhp,             ":OCIError"]
       - [OraText *bufp,               ":string_with_maxlen", ":out", bufsz]
       - [ub4 bufsz,                   ":ub4"]
       - [ub1 hndltype,                ":htype"]

OCISessionBegin:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCISession *usrhp,           ":OCISession"]
       - [ub4 credt,                   ":OCICredentialType"]
       - [ub4 mode,                    ":ub4"]

OCISessionEnd:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCISession *usrhp,           ":OCISession"]
       - [ub4 mode,                    ":ub4"]

OCISessionGet:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCISvcCtx **svchp,           ":pointer_to_ocihandle", ":out", OCI_HTYPE_SVCCTX, envhp, ret]
       - [OCIAuthInfo *authhp,         ":pointer"]
       - [OraText *poolName,           ":string_with_length", ":in", poolName_len]
       - [ub4 poolName_len,            ":ub4"]
       - [const OraText *tagInfo,      ":string_with_length", ":in", tagInfo_len]
       - [ub4 tagInfo_len,             ":ub4"]
       - [OraText **retTagInfo,        ":pointer_to_string_with_length", ":out", retTagInfo_len, ret]
       - [ub4 *retTagInfo_len,         ":pointer_to_ub4", ":out"]
       - [boolean *found,              ":pointer_to_boolean", ":out"]
       - [ub4 mode,                    ":ub4"]

OCISessionPoolCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *envhp,               ":OCIEnv"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCISPool *spoolhp,           ":pointer"]
       - [OraText **poolName,          ":pointer_to_string_with_length", ":out", poolNameLen, ret]
       - [ub4 *poolNameLen,            ":pointer_to_ub4", ":out"]
       - [const OraText *connStr,      ":string_with_length", ":in", connStrLen]
       - [ub4 connStrLen,              ":ub4"]
       - [ub4 sessMin,                 ":ub4"]
       - [ub4 sessMax,                 ":ub4"]
       - [ub4 sessIncr,                ":ub4"]
       - [OraText *userid,             ":string_with_length", ":in", useridLen]
       - [ub4 useridLen,               ":ub4"]
       - [OraText *password,           ":string_with_length", ":in", passwordLen]
       - [ub4 passwordLen,             ":ub4"]
       - [ub4 mode,                    ":ub4"]

OCISessionPoolDestroy:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISPool *spoolhp,           ":pointer"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 mode,                    ":ub4_hex"]

OCISessionRelease:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OraText *tag,                ":string_with_length", ":in", tag_len]
       - [ub4 tag_len,                 ":ub4"]
       - [ub4 mode,                    ":ub4_hex"]

OCISharedLibInit:
  :ret:  [sword,                       ":status"]
  :args:
       - [void *metaCtx,               ":pointer"]
       - [void *libCtx,                ":pointer"]
       - [ub4 argfmt,                  ":ub4"]
       - [sword argc,                  ":sword"]
       - [void **argv,                 ":pointer"]
       - [OCIEnvCallbackType envCallback, ":function_pointer"]

OCIStmtExecute:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 iters,                   ":ub4"]
       - [ub4 rowoff,                  ":ub4"]
       - [const OCISnapshot *snap_in,  ":pointer"]
       - [OCISnapshot *snap_out,       ":pointer"]
       - [ub4 mode,                    ":ub4_hex"]

OCIStmtFetch:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 nrows,                   ":ub4"]
       - [ub2 orientation,             ":OCIFetchOption"]
       - [ub4 mode,                    ":ub4"]

OCIStmtFetch2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 nrows,                   ":ub4"]
       - [ub2 orientation,             ":OCIFetchOption"]
       - [sb4 scrollOffset,            ":sb4"]
       - [ub4 mode,                    ":ub4"]

OCIStmtGetBindInfo:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 size,                    ":ub4"]
       - [ub4 startloc,                ":ub4"]
       - [sb4 *found,                  ":pointer_to_sb4", ":out"]
       - ["OraText *bvnp[]",           ":array_of_string_with_ub1length", ":out", bvnl, num, ret]
       - ["ub1 bvnl[]",                ":array_of_ub1", ":out", num, ret]
       - ["OraText *invp[]",           ":array_of_string_with_ub1length", ":out", inpl, num, ret]
       - ["ub1 inpl[]",                ":array_of_ub1", ":out", num, ret]
       - ["ub1 dupl[]",                ":array_of_ub1", ":out", num, ret]
       - [OCIBind **hndl,              ":array_of_pointer", ":out", num, ret]
  :after_call: |
    sb4 rest_cnt = abs(*found) - startloc - 1;
    ub4 num = size;
    if (rest_cnt < 0) {
        num = 0;
    } else if (num < rest_cnt) {
        num = rest_cnt;
    }

OCIStmtGetPieceInfo:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIError *errhp,             ":OCIError"]
       - [dvoid **hndlpp,              ":pointer_to_pointer", ":out"]
       - [ub4 *typep,                  ":pointer_to_htype", ":out"]
       - [ub1 *in_outp,                ":pointer_to_ub1", ":out"]
       - [ub4 *iterp,                  ":pointer_to_ub4", ":out"]
       - [ub4 *idxp,                   ":pointer_to_ub4", ":out"]
       - [ub1 *piecep,                 ":pointer_to_OCI_PIECE", ":out"]

OCIStmtGetNextResult:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmthp,             ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIError *errhp,             ":OCIError"]
       - [void **result,               ":pointer_to_pointer", ":out"]
       - [ub4 *rtype,                  ":pointer_to_ub4", ":out"]
       - [ub4 mode,                    ":ub4_hex"]


OCIStmtPrepare:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle", ":in", OCI_HTYPE_STMT]
       - [OCIError *errhp,             ":OCIError"]
       - [const OraText *stmt,         ":string_with_length", ":in", stmt_len]
       - [ub4 stmt_len,                ":ub4"]
       - [ub4 language,                ":OCI_SYNTAX"]
       - [ub4 mode,                    ":ub4"]

OCIStmtPrepare2:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIStmt **stmtp,             ":pointer_to_ocihandle", ":out", OCI_HTYPE_STMT, svchp, ret]
       - [OCIError *errhp,             ":OCIError"]
       - [const OraText *stmt,         ":string_with_length", ":in", stmt_len]
       - [ub4 stmt_len,                ":ub4"]
       - [const OraText *key,          ":string_with_length", ":in", key_len]
       - [ub4 key_len,                 ":ub4"]
       - [ub4 language,                ":OCI_SYNTAX"]
       - [ub4 mode,                    ":ub4"]

OCIStmtRelease:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIStmt *stmtp,              ":ocihandle_free", ":in", OCI_HTYPE_STMT]
       - [OCIError *errhp,             ":OCIError"]
       - [const OraText *key,          ":string_with_length", ":in", key_len]
       - [ub4 key_len,                 ":ub4"]
       - [ub4 mode,                    ":ub4"]

OCIStmtSetPieceInfo:
  :ret:  [sword,                       ":status"]
  :args:
       - [dvoid *hndlp,                ":ocihandle", ":in", type]
       - [ub4 type,                    ":htype"]
       - [OCIError *errhp,             ":OCIError"]
       - [CONST dvoid *bufp,     "%p", bufp]
       - [ub4 *alenp,            "%p", alenp]
       - [ub1 piece,             "%u", piece]
       - [CONST dvoid *indp,     "%p", indp]
       - [ub2 *rcodep,           "%p", rcodep]

OCIStringAllocSize:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIString *vs,         ":pointer"]
       - [ub4 *allocsize,              ":pointer_to_ub4", ":out"]

OCIStringAssign:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIString *rhs,        ":pointer"]
       - [OCIString **lhs,             ":pointer_to_pointer", ":inout"]

OCIStringAssignText:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const text *rhs,             ":string_with_length", rhs_len]
       - [ub4 rhs_len,                 ":ub4"]
       - [OCIString **lhs,             ":pointer_to_pointer", ":inout"]

OCIStringPtr:
  :ret:  [text *,                      ":pointer"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [const OCIString *vs,         ":pointer"]

OCIStringResize:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [ub4 new_size,                ":ub4"]
       - [OCIString **str,             ":pointer_to_pointer", ":inout"]

OCIStringSize:
  :ret:  [ub4,                         ":ub4"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [const OCIString *vs,         ":pointer"]

OCITableDelete:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [sb4 index,                   ":sb4"]
       - [OCITable *tbl,               ":pointer"]

OCITableExists:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITable *tbl,         ":pointer"]
       - [sb4 index,                   ":sb4"]
       - [boolean *exists,             ":pointer_to_boolean", ":out"]

OCITableFirst:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITable *tbl,         ":pointer"]
       - [sb4 *index,                  ":pointer_to_sb4", ":out"]

OCITableLast:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITable *tbl,         ":pointer"]
       - [sb4 *index,                  ":pointer_to_sb4", ":out"]

OCITableNext:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [sb4 index,                   ":sb4"]
       - [const OCITable *tbl,         ":pointer"]
       - [sb4 *next_index,             ":pointer_to_sb4", ":out"]
       - [boolean *exists,             ":pointer_to_boolean", ":out"]

OCITablePrev:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [sb4 index,                   ":sb4"]
       - [const OCITable *tbl,         ":pointer"]
       - [sb4 *prev_index,             ":pointer_to_sb4", ":out"]
       - [boolean *exists,             ":pointer_to_boolean", ":out"]

OCITableSize:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITable *tbl,         ":pointer"]
       - [sb4 *size,                   ":pointer_to_sb4", ":out"]

OCITransCommit:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 flags,                   ":ub4_hex"]

OCITransRollback:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [ub4 flags,                   ":ub4_hex"]

OCITypeAddAttr:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIType *type,               ":pointer"]
       - [const oratext *a_name,       ":string_with_length", ":in", a_length]
       - [ub4 a_length,                ":ub4"]
       - [OCIParam *attr_info,         ":pointer"]

OCITypeArrayByName:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [ub4 array_len,               ":ub4"]
       - ["const oratext *schema_name[]", ":array_of_const_string_with_length", ":in", s_length, array_len, 0]
       - ["ub4 s_length[]",            ":array_of_ub4", ":in", array_len, 0]
       - ["const oratext *type_name[]", ":array_of_const_string_with_length", ":in", t_length, array_len, 0]
       - ["ub4 t_length[]",            ":array_of_ub4", ":in", array_len, 0]
       - ["const oratext *version_name[]", ":array_of_const_string_with_length", ":in", v_length, array_len, 0]
       - ["ub4 v_length[]",            ":array_of_ub4", ":in", array_len, 0]
       - [OCIDuration pin_duration,    ":OCIDuration"]
       - [OCITypeGetOpt get_option,    ":OCITypeGetOpt"]
       - ["OCIType *tdo[]",            ":array_of_pointer", ":out", array_len, ret]

OCITypeArrayByFullName:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [ub4 array_len,               ":ub4"]
       - ["const oratext *full_type_name[]", ":array_of_const_string_with_length", ":in", full_type_name_length, array_len, 0]
       - ["ub4 full_type_name_length[]", ":array_of_ub4", ":in", array_len, 0]
       - ["const oratext *version_name[]", ":array_of_const_string_with_length", ":in", version_name_length, array_len, 0]
       - ["ub4 version_name_length[]",   ":array_of_ub4", ":in", array_len, 0]
       - [OCIDuration pin_duration,    ":OCIDuration"]
       - [OCITypeGetOpt get_option,    ":OCITypeGetOpt"]
       - [OCIType **tdo,               ":array_of_pointer", ":out", array_len, ret]

OCITypeArrayByRef:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [ub4 array_len,               ":ub4"]
       - [const OCIRef **type_ref,     ":array_of_pointer", ":out", array_len, ret]
       - [OCIDuration pin_duration,    ":OCIDuration"]
       - [OCITypeGetOpt get_option,    ":OCITypeGetOpt"]
       - [OCIType **tdo,               ":array_of_pointer", ":out", array_len, ret]

OCITypeAttrByName:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [const oratext *name,         ":string_with_length", n_length]
       - [ub4 n_length,                ":ub4"]
       - [OCITypeElem **elem,          ":pointer_to_pointer"]

OCITypeAttrNext:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCITypeIter *iterator_ort,   ":pointer"]
       - [OCITypeElem **elem,          ":pointer_to_pointer"]

OCITypeAttrs:
  :ret:  [ub4,                         ":ub4"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]

OCITypeBeginCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCITypeCode tc,              ":OCITypeCode"]
       - [OCIDuration dur,             ":OCIDuration"]
       - [OCIType **type,              ":pointer_to_pointer", ":out"]

OCITypeByName:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [const oratext *schema_name,  ":string_with_length", ":in", s_length]
       - [ub4 s_length,                ":ub4"]
       - [const oratext *type_name,    ":string_with_length", ":in", t_length]
       - [ub4 t_length,                ":ub4"]
       - [const oratext *version_name, ":string_with_length", ":in", v_length]
       - [ub4 v_length,                ":ub4"]
       - [OCIDuration pin_duration,    ":OCIDuration"]
       - [OCITypeGetOpt get_option,    ":OCITypeGetOpt"]
       - [OCIType **tdo,               ":pointer_to_pointer", ":out"]

OCITypeByFullName:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCISvcCtx *svc,        ":OCISvcCtx"]
       - [const oratext *full_type_name, ":string_with_length", ":in", full_type_name_length]
       - [ub4 full_type_name_length,   ":ub4"]
       - [const oratext *version_name, ":string_with_length", ":in", version_name_length]
       - [ub4 version_name_length,     ":ub4"]
       - [OCIDuration pin_duration,    ":OCIDuration"]
       - [OCITypeGetOpt get_option,    ":OCITypeGetOpt"]
       - [OCIType **tdo,               ":pointer_to_pointer", ":out"]

OCITypeByRef:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIRef *type_ref,      ":pointer"]
       - [OCIDuration pin_duration,    ":OCIDuration"]
       - [OCITypeGetOpt get_option,    ":OCITypeGetOpt"]
       - [OCIType **tdo,               ":pointer_to_pointer", ":out"]

OCITypeCollElem:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [OCITypeElem **element,       ":pointer_to_pointer", ":out"]

OCITypeCollExtTypeCode:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [OCITypeCode *sqt_code,       ":pointer_to_SQLT", ":out"]

OCITypeCollSize:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [ub4 *num_elems,              ":pointer_to_ub4", ":out"]

OCITypeCollTypeCode:
  :ret:  [OCITypeCode,                 ":OCITypeCode"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]

OCITypeElemCharSetForm:
  :ret:  [ub2,                         ":ub2"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]

OCITypeElemCharSetID:
  :ret:  [ub2,                         ":ub2"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]

OCITypeElemDefaultValue:
  :ret:  [oratext* ,                   ":string_with_length", ":out", "*d_v_length"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]
       - [ub4 *d_v_length,             ":pointer_to_ub4", ":out"]

OCITypeElemExtTypeCode:
  :ret:  [OCITypeCode,                 ":OCITypeCode"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]

OCITypeElemFlags:
  :ret:  [ub4,                         ":ub4"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]

OCITypeElemLength:
  :ret:  [ub4,                         ":ub4"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]

OCITypeElemName:
  :ret:  [oratext*,                    ":string_with_length", ":out", "*n_length"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]
       - [ub4 *n_length,               ":pointer_to_ub4", ":out"]

OCITypeElemNumPrec:
  :ret:  [ub1,                         ":ub1"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]

OCITypeElemNumScale:
  :ret:  [sb1,                         ":sb1"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]

OCITypeElemParamMode:
  :ret:  [OCITypeParamMode,            ":OCITypeParamMode"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]

OCITypeElemParameterizedType:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]
       - [OCIType **type_stored,       ":pointer_to_pointer", ":out"]

OCITypeElemType:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]
       - [OCIType **elem_tdo,          ":pointer_to_pointer", ":out"]

OCITypeElemTypeCode:
  :ret:  [OCITypeCode,                 ":OCITypeCode"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeElem *elem,     ":pointer"]

OCITypeEndCreate:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIType *type,               ":pointer"]

OCITypeIterFree:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCITypeIter *iterator_ort,   ":pointer"]

OCITypeIterNew:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIType *tdo,                ":pointer"]
       - [OCITypeIter **iterator_ort,  ":pointer_to_pointer", ":out"]

OCITypeIterSet:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCIType *tdo,                ":pointer"]
       - [OCITypeIter *iterator_ort,   ":pointer"]

OCITypeMethodByName:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [const oratext *method_name,  ":string_with_length", ":in", m_length]
       - [ub4 m_length,                ":ub4"]
       - [OCITypeMethod **mdos,        ":pointer_to_pointer", ":out"]

OCITypeMethodEncap:
  :ret:  [OCITypeEncap,                ":OCITypeEncap"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeMethod *mdo,    ":pointer"]

OCITypeMethodFlags:
  :ret:  [OCITypeMethodFlag,           ":OCITypeMethodFlag"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeMethod *mdo,    ":pointer"]

OCITypeMethodMap:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [OCITypeMethod **mdo,         ":pointer_to_pointer", ":out"]

OCITypeMethodName:
  :ret:  [oratext *,                   ":string_with_length", ":out", "*n_length"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeMethod *mdo,    ":pointer"]
       - [ub4 *n_length,               ":pointer_to_ub4", ":out"]

OCITypeMethodNext:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [OCITypeIter *iterator_ort,   ":pointer"]
       - [OCITypeMethod **mdo,         ":pointer_to_pointer", ":out"]

OCITypeMethodOrder:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [OCITypeMethod **mdo,         ":pointer_to_pointer", ":out"]

OCITypeMethodOverload:
  :ret:  [ub4,                         ":ub4"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [const oratext *method_name,  ":string_with_length", ":in", m_length]
       - [ub4 m_length,                ":ub4"]

OCITypeMethodParams:
  :ret:  [ub4,                         ":ub4"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeMethod *mdo,    ":pointer"]

OCITypeMethods:
  :ret:  [ub4,                         ":ub4"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]

OCITypeName:
  :ret:  [oratext *,                   ":string_with_length", ":out", "*n_length"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [ub4 *n_length,               ":pointer_to_ub4", ":out"]

OCITypePackage:
  :ret:  [oratext *,                   ":string_with_length", ":out", "*n_length"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [ub4 *n_length,               ":pointer_to_ub4", ":out"]

OCITypeParamByName:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeMethod *mdo,    ":pointer"]
       - [const oratext *name,         ":string_with_length", ":in", n_length]
       - [ub4 n_length,                ":ub4"]
       - [OCITypeElem **elem,          ":pointer_to_pointer", ":out"]

OCITypeParamByPos:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeMethod *mdo,    ":pointer"]
       - [ub4 position,                ":ub4"]
       - [OCITypeElem **elem,          ":pointer_to_pointer", ":out"]

OCITypeParamPos:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeMethod *mdo,    ":pointer"]
       - [const oratext *name,         ":string_with_length", ":in", n_length]
       - [ub4 n_length,                ":ub4"]
       - [ub4 *position,               ":pointer_to_ub4", ":out"]
       - [OCITypeElem **elem,          ":pointer_to_pointer", ":out"]

OCITypeResult:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCITypeMethod *mdo,    ":pointer"]
       - [OCITypeElem **elem,          ":pointer_to_pointer", ":out"]

OCITypeSchema:
  :ret:  [oratext*,                    ":string_with_length", ":out", "*n_length"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [ub4 *n_length,               ":pointer_to_ub4", ":out"]

OCITypeSetBuiltin:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIType *type,               ":pointer"]
       - [OCIParam *builtin_info,      ":pointer"]

OCITypeSetCollection:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCISvcCtx *svchp,            ":OCISvcCtx"]
       - [OCIError *errhp,             ":OCIError"]
       - [OCIType *type,               ":pointer"]
       - [OCIParam *collelem_info,     ":pointer"]
       - [ub4 coll_count,              ":ub4"]

OCITypeTypeCode:
  :ret:  [OCITypeCode,                 ":OCITypeCode"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]

OCITypeVTInit:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]

OCITypeVTInsert:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const oratext *schema_name,  ":string_with_length", ":in", s_n_length]
       - [ub4 s_n_length,              ":ub4"]
       - [const oratext *type_name,    ":string_with_length", ":in", t_n_length]
       - [ub4 t_n_length,              ":ub4"]
       - [const oratext *user_version, ":string_with_length", ":in", u_v_length]
       - [ub4 u_v_length,              ":ub4"]

OCITypeVTSelect:
  :ret:  [sword,                       ":status"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const oratext *schema_name,  ":string_with_length", ":in", s_n_length]
       - [ub4 s_n_length,              ":ub4"]
       - [const oratext *type_name,    ":string_with_length", ":in", t_n_length]
       - [ub4 t_n_length,              ":ub4"]
       - [oratext **user_version,      ":pointer_to_string_with_length", ":out", u_v_length, ret]
       - [ub4 *u_v_length,             ":pointer_to_ub4", ":out"]
       - [ub2 *version,                ":pointer_to_ub2", ":out"]

OCITypeVersion:
  :ret:  [oratext*,                    ":string_with_length", ":out", "*v_length"]
  :args:
       - [OCIEnv *env,                 ":OCIEnv"]
       - [OCIError *err,               ":OCIError"]
       - [const OCIType *tdo,          ":pointer"]
       - [ub4 *v_length,               ":pointer_to_ub4", ":out"]
